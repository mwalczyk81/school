@page "/"

@using Weather.Models
@using Weather.Services
@using MudBlazor

@inject IWeatherService WeatherService
@inject ICitySuggestionService CitySuggestionService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<title>Weather Forecast</title>
<MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Weather Forecast</MudText>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Class="pa-4" Elevation="3">
        <MudGrid Justify="Justify.SpaceBetween" Class="mb-4">
            <MudItem xs="12" sm="8">
                <MudAutocomplete @bind-Value="SelectedCity"
                                 Label="City"
                                 Variant="Variant.Text"
                                 Placeholder="Enter city"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.LocationCity"
                                 AdornmentColor="Color.Primary"
                                 IconSize="Size.Medium"
                                 Immediate="true"
                                 ToStringFunc="(city) => city?.DisplayName"
                                 MinCharacters="2"
                                 OnClearButtonClick="ClearSelectedCity"
                                 SearchFunc="@SearchCitySuggestions"
                                 Clearable="true"
                                 TextChanged="OnInputTextChanged" />
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex justify-end">
                <MudButton OnClick="GetWeatherAsync"
                           Disabled="@(SelectedCity == null || _weatherData.IsLoading)"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           Size="Size.Small"
                           Class="mx-2"
                           AriaLabel="Get Weather">
                    Get Weather
                </MudButton>
                <MudIconButton OnClick="GetWeatherByLocationAsync"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Icon="@Icons.Material.Filled.MyLocation"
                               Size="Size.Large"
                               AriaLabel="Get Weather by Location" />
            </MudItem>
        </MudGrid>

        @if (_weatherData.IsLoading)
        {
            <MudSkeleton Width="100%" Height="200px" Class="mb-3" />
        }
        else if (_weatherData.WeatherResponse?.WeatherData != null && _weatherData.WeatherResponse?.DailyForecasts != null)
        {
            <!-- Current Weather Section -->
            <MudPaper Class="pa-4 mt-5" Elevation="2">
                <MudText Align="Align.Center" id="CityLabel" Typo="Typo.h5">@_weatherData.WeatherResponse.WeatherData.Name</MudText>
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudAvatar Size="Size.Large" Class="weather-icon">
                        <MudImage Src="@GetIconUrl(_weatherData.WeatherResponse.WeatherData.Weather?[0].Icon ?? "")" Alt="@_weatherData.WeatherResponse.WeatherData.Weather?[0].Description" />
                    </MudAvatar>
                    <MudText Typo="Typo.h6">@_weatherData.WeatherResponse.WeatherData.Main?.Temp.GetValueOrDefault().ToString("0")°F</MudText>
                    <MudText Typo="Typo.h6">Humidity @_weatherData.WeatherResponse.WeatherData.Main?.Humidity%</MudText>
                    <MudText Typo="Typo.subtitle2">@_weatherData.WeatherResponse.WeatherData.Weather?[0].Description</MudText>
                </MudStack>
            </MudPaper>

            <!-- 5-Day Forecast Section -->
            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">5-Day Forecast:</MudText>
            <MudGrid Spacing="3">
                @foreach (var day in _weatherData.WeatherResponse.DailyForecasts)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudExpansionPanels>
                            <MudExpansionPanel Style="cursor: pointer; text-align: center;"
                                               Class="pa-2 forecast-card">
                                <TitleContent>
                                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                        <!-- Weather Icon -->
                                        <MudAvatar Size="Size.Medium" Class="weather-icon">
                                            <MudImage Src="@GetIconUrl(day.Value.Icon ?? "")" Alt="@day.Value.Details?[0].Weather?[0].Description" />
                                        </MudAvatar>
                                        <!-- Date -->
                                        <MudText Typo="Typo.subtitle1">@DateTime.Parse(day.Key).ToString("dddd MMM d")</MudText>
                                        <!-- High Temperature -->
                                        <MudText Typo="Typo.body2">High: @day.Value.High.GetValueOrDefault().ToString("0")°F</MudText>
                                        <!-- Low Temperature -->
                                        <MudText Typo="Typo.body2">Low: @day.Value.Low.GetValueOrDefault().ToString("0")°F</MudText>
                                    </MudStack>
                                </TitleContent>

                                <!-- Expanded Content: Hourly Forecast -->
                                <ChildContent>
                                    <MudDivider Class="my-2" />
                                    <MudText Typo="Typo.h6" Class="mt-2">Hourly Forecast:</MudText>
                                    <MudGrid Spacing="3">
                                        @if (day.Value.Details != null)
                                        {
                                            @foreach (var hourly in day.Value.Details)
                                            {
                                                <MudItem xs="12" sm="6" md="4" lg="6">
                                                    <MudPaper Class="pa-4" Elevation="2" Style="text-align: center; min-height: 250px;">
                                                        <MudStack Spacing="2" AlignItems="AlignItems.Center" JustifyContent="Center" Style="height: 100%;">
                                                            <MudAvatar Size="Size.Medium">
                                                                <MudImage Src="@GetIconUrl(hourly.Weather?[0]?.Icon ?? "")" Alt="@hourly.Weather?[0]?.Description" />
                                                            </MudAvatar>
                                                            <MudText Typo="Typo.caption">@DateTime.Parse(hourly.Dt_Txt ?? "").ToString("h:mm tt")</MudText>
                                                            <MudText Typo="Typo.body2">@Math.Round(hourly.Main?.Temp ?? 0)°F</MudText>
                                                            <MudText Typo="Typo.caption">@hourly.Weather?[0]?.Description</MudText>
                                                        </MudStack>
                                                    </MudPaper>
                                                </MudItem>
                                            }
                                        }
                                    </MudGrid>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            </MudGrid>

            <!-- 5-Day Temperature Trend Chart -->
            <MudPaper Class="pa-4 mt-4" Elevation="2" Width="100%">
                <MudText Typo="Typo.h6" GutterBottom="true">Temperature Trends for the Next 5 Days:</MudText>
                <MudChart Width="100%" ChartType="ChartType.Line" XAxisLabels="@GetXAxisLabels()"
                          ChartSeries="@GetTemperatureDataSets()">
                </MudChart>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>

@code {
    public CitySuggestion? SelectedCity { get; set; }
    internal WeatherDataModel _weatherData = new WeatherDataModel();
    internal const string WeatherIconBaseUrl = "https://openweathermap.org/img/wn/";
    private string[]? Labels { get; set; }

    protected override void OnInitialized()
    {
        // Populate the Labels array with the formatted dates from the weather data
        Labels = _weatherData.WeatherResponse?.DailyForecasts?.Keys
            .Select(key => DateTime.Parse(key).ToString("MMM d"))
            .ToArray() ?? [];
    }

    private string[] GetXAxisLabels() => _weatherData.WeatherResponse?.DailyForecasts?.Keys
            .Select(key => DateTime.Parse(key).ToString("MMM d"))
            .ToArray() ?? [];

    private void ClearSelectedCity()
    {
        SelectedCity = null;
    }

    private void OnInputTextChanged(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            SelectedCity = null;
        }
    }

    public async Task<IEnumerable<CitySuggestion?>>? SearchCitySuggestions(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            SelectedCity = null;
            return [];
        }

        return await CitySuggestionService.GetCitySuggestionsAsync(value, cancellationToken);
    }

    private List<ChartSeries> GetTemperatureDataSets()
    {
        return new List<ChartSeries>
        {
            new ChartSeries { Name = "High Temp", Data = GetHighTempData() },
            new ChartSeries { Name = "Low Temp", Data = GetLowTempData() }
        };
    }

    public async Task GetWeatherAsync()
    {
        StartLoading();
        try
        {
            if (SelectedCity is null)
            {
                DisplayError("Please select a city.");
                return;
            }

            if (SelectedCity.Lng is null || SelectedCity.Lat is null)
            {
                DisplayError("Location not found.");
                return;
            }

            _weatherData.WeatherResponse = await WeatherService.GetWeatherAsync(lat: double.Parse(SelectedCity.Lat), lon: double.Parse(SelectedCity.Lng));

            ResetExpandedDay();
        }
        catch (Exception ex)
        {
            DisplayError($"An error occurred: {ex.Message}");
        }
        finally
        {
            StopLoading();
        }
    }

    internal async Task GetWeatherByLocationAsync()
    {
        StartLoading();

        try
        {
            // Call JavaScript to get the user's location (lat/lon)
            var location = await JSRuntime.InvokeAsync<Location>("getUserLocation");

            if (location.Latitude is null || location.Longitude is null)
            {
                DisplayError("Failed to retrieve location.");
                return;
            }

            // Fetch weather data using the user's latitude and longitude
            _weatherData.WeatherResponse = await WeatherService.GetWeatherAsync(lat: location.Latitude, lon: location.Longitude);

            ResetExpandedDay();
        }
        catch (Exception ex)
        {
            DisplayError($"Failed to retrieve location: {ex.Message}");
        }
        finally
        {
            StopLoading();
        }
    }

    private string GetPanelText(string dateKey, DailyForecast day)
    {
        var date = DateTime.Parse(dateKey).ToString("ddd d");
        return $"{date} - High: {day.High.GetValueOrDefault().ToString("0")}°F, Low: {day.Low.GetValueOrDefault().ToString("0")}°F";
    }

    private void ToggleDay(string day) => _weatherData.ExpandedDay = _weatherData.ExpandedDay == day ? "" : day;

    private string GetIconUrl(string icon) => $"{WeatherIconBaseUrl}{icon}.png";

    private void StartLoading() => _weatherData.IsLoading = true;

    private void StopLoading() => _weatherData.IsLoading = false;

    private void ResetExpandedDay() => _weatherData.ExpandedDay = "";

    private void DisplayError(string message) => _weatherData.ErrorMessage = message;

    private double[] GetHighTempData() => _weatherData.WeatherResponse?.DailyForecasts?.Values.Select(forecast => Math.Round(forecast.High!.Value)).ToArray() ?? [];

    private double[] GetLowTempData() => _weatherData.WeatherResponse?.DailyForecasts?.Values.Select(forecast => Math.Round(forecast.Low!.Value)).ToArray() ?? [];
}