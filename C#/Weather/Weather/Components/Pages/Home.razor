@page "/"

@using global::Weather.Models
@using global::Weather.Services

@inject WeatherService WeatherService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Weather Forecast</MudText>
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6" >
    <MudPaper  Class="pa-4" Elevation="3">
        <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudItem xs="12" sm="8">
                <MudTextField @bind-Value="City" Placeholder="Enter city" Label="City"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LocationCity" Size="Size.Large" Immediate="true" TextChanged="OnCityChanged" />
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex justify-end">
                <MudButton OnClick="GetWeather" Disabled="@isGetWeatherDisabled" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Class="mx-2">Get Weather</MudButton>
                <MudIconButton OnClick="GetWeatherByLocation" Color="Color.Primary" Variant="Variant.Filled" Icon="@Icons.Material.Filled.MyLocation" Size="Size.Large"/>
            </MudItem>
        </MudGrid>

        @if (loading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Medium" Class="d-flex mx-auto mt-5" />
        }
        else if (currentWeather != null && dailySummary != null)
        {
            <!-- Current Weather Section -->
            <MudPaper Class="pa-4 mt-5" Elevation="2">
                <MudText Align="Align.Center" Typo="Typo.h5">@currentWeather.Name</MudText>
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudAvatar Size="Size.Large" Class="weather-icon">
                        <MudImage Src="@GetIconUrl(currentWeather.Weather?[0].Icon ?? "")"></MudImage>
                    </MudAvatar>
                    <MudText Typo="Typo.h6">@currentWeather.Main?.Temp°F</MudText>
                    <MudText Typo="Typo.h6">Humidity @currentWeather.Main?.Humidity%</MudText>
                    <MudText Typo="Typo.subtitle2">@currentWeather.Weather?[0].Description</MudText>
                </MudStack>
            </MudPaper>

            <!-- 5-Day Forecast Section -->
            <MudText Typo="Typo.h6" GutterBottom="true" Class="mt-4">5-Day Forecast:</MudText>
            <MudGrid Spacing="3">
                @foreach (var day in dailySummary)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudPaper Class="pa-2 forecast-card" Elevation="2" onclick="@(() => ToggleDay(day.Key))" Style="cursor: pointer;">
                            <MudText Typo="Typo.subtitle1">@DateTime.Parse(day.Key).ToString("dddd MMM d")</MudText>
                            <MudAvatar Size="Size.Medium" Class="weather-icon">
                                <MudImage Src="@GetIconUrl(day.Value.Icon ?? "")"></MudImage>
                            </MudAvatar>
                            <MudText Typo="Typo.body2">High: @day.Value.High°F</MudText>
                            <MudText Typo="Typo.body2">Low: @day.Value.Low°F</MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>

            <!-- Hourly Forecast Expanded Section -->
            @if (!string.IsNullOrEmpty(expandedDay))
            {
                <MudPaper Class="pa-4 mt-4" Elevation="1">
                    <MudText Typo="Typo.h6">Hourly Forecast for @DateTime.Parse(expandedDay).ToString("dddd MMM d"):</MudText>
                    <MudGrid Spacing="3">
                        @if (dailySummary.ContainsKey(expandedDay) && dailySummary[expandedDay]?.Details is not null)
                        {
                            @foreach (var hourly in dailySummary[expandedDay].Details!)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="2">
                                    <MudPaper Class="pa-2" Elevation="1" Style="text-align: center;">
                                        <MudText Typo="Typo.caption">@DateTime.Parse(hourly.Dt_Txt ?? "").ToString("h:mm tt")</MudText>
                                        <br />
                                        <MudAvatar Size="Size.Small">
                                            <MudImage Src="@GetIconUrl(hourly.Weather?[0]?.Icon ?? "")"></MudImage>
                                        </MudAvatar>
                                        <MudText Typo="Typo.body2">@hourly.Main?.Temp°F</MudText>
                                        <MudText Typo="Typo.caption">@hourly.Weather?[0].Description</MudText>
                                    </MudPaper>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudPaper>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    private string City = "";
    private WeatherData? currentWeather;
    private Dictionary<string, DailyForecast>? dailySummary;
    private string? errorMessage;
    private string expandedDay = ""; // Track the currently expanded day
    private bool loading = false;
    private bool isGetWeatherDisabled = true;

    private void OnCityChanged(string city)
    {
        City = city;
        isGetWeatherDisabled = string.IsNullOrWhiteSpace(City);
    }

    private async Task GetWeather()
    {
        loading = true;
        try
        {
            (currentWeather, dailySummary, errorMessage) = await WeatherService.GetWeatherAsync(City);

            if (!string.IsNullOrEmpty(errorMessage))
            {
                Snackbar.Add(errorMessage, Severity.Error);
            }

            expandedDay = ""; // Reset expanded day when new data is fetched
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GetWeatherByLocation()
    {
        loading = true;
        try
        {
            // Call JavaScript to get the user's location (lat/lon)
            var location = await JSRuntime.InvokeAsync<Location>("getUserLocation", Array.Empty<object>());

            // Fetch weather data using the user's latitude and longitude
            (currentWeather, dailySummary, errorMessage) = await WeatherService.GetWeatherAsync(lat: location.Lat, lon: location.Lon);
            expandedDay = ""; // Reset expanded day when new data is fetched
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to retrieve location: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void ToggleDay(string day)
    {
        expandedDay = expandedDay == day ? "" : day; // Toggle the expanded day
        StateHasChanged();
    }

    private string GetIconUrl(string icon) => $"https://openweathermap.org/img/wn/{icon}.png";
}
